!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}([function(n,e,t){"use strict";t.r(e),t.d(e,"start",function(){return a});var r=t(1),o=t(2);function i(n){let e=function(n){return n.getAttribute("name")}(n);return o[e]}function u(n,e){var t=function(n){return i(n).nodeCoordinates}(n),r=function(n){return i(n).graph.links}(n);e.lineStyle(2),r.forEach(n=>{let r=t[n.source],o=t[n.target];e.moveTo(r.x,r.y),e.lineTo(o.x,o.y)})}function c(n){var e=n.getAttribute("name"),t=o[e],c=(t.nodeCoordinates,t.graph.links,new PIXI.Application({width:n.getAttribute("width"),height:n.getAttribute("height"),antialias:!0}));document.body.appendChild(c.view);var a=PIXI.Sprite.fromImage(t.image);a.anchor.set(.5),a.x=c.screen.width/2,a.y=c.screen.height/2,c.stage.addChild(a);var f=new PIXI.Graphics;u(n,f),function(n,e){var t=r(),o=i(n),u=o.nodeCoordinates;t.deserialize(o.graph),t.nodes().forEach(n=>{let t=u[n];e.beginFill(),e.drawCircle(t.x,t.y,10),e.endFill()})}(n,f),c.stage.addChild(f)}function a(){document.querySelectorAll("neuronsanim").forEach(c)}a()},function(n,e){n.exports=function(n){var e={addNode:o,removeNode:function(n){return Object.keys(t).forEach(function(e){t[e].forEach(function(t){t===n&&s(e,t)})}),delete t[n],e},nodes:i,adjacent:u,addEdge:d,removeEdge:s,setEdgeWeight:a,getEdgeWeight:f,indegree:function(n){var e=0;function r(t){t===n&&e++}return Object.keys(t).forEach(function(n){t[n].forEach(r)}),e},outdegree:function(n){return n in t?t[n].length:0},depthFirstSearch:h,topologicalSort:function(n,e){return h(n,e).reverse()},shortestPath:function(n,e){var t={},r={},o={};function c(){var n,e=1/0;return Object.keys(o).forEach(function(r){t[r]<e&&(e=t[r],n=r)}),void 0===n?(o={},null):(delete o[n],n)}function a(n,e){var o=f(n,e);t[e]>t[n]+o&&(t[e]=t[n]+o,r[e]=n)}return function(){for(function(){if(i().forEach(function(n){t[n]=1/0}),t[n]!==1/0)throw new Error("Source node is not in the graph");if(t[e]!==1/0)throw new Error("Destination node is not in the graph");t[n]=0}(),i().forEach(function(n){o[n]=!0});0!==Object.keys(o).length;){var r=c();u(r).forEach(function(n){a(r,n)})}}(),function(){for(var t=[],o=0,i=e;r[i];)t.push(i),o+=f(r[i],i),i=r[i];if(i!==n)throw new Error("No path found");return t.push(i),t.reverse(),t.weight=o,t}()},serialize:function(){var n={nodes:i().map(function(n){return{id:n}}),links:[]};return n.nodes.forEach(function(e){var t=e.id;u(t).forEach(function(e){n.links.push({source:t,target:e,weight:f(t,e)})})}),n},deserialize:l},t={},r={};function o(n){return t[n]=u(n),e}function i(){var n={};return Object.keys(t).forEach(function(e){n[e]=!0,t[e].forEach(function(e){n[e]=!0})}),Object.keys(n)}function u(n){return t[n]||[]}function c(n,e){return n+"|"+e}function a(n,t,o){return r[c(n,t)]=o,e}function f(n,e){var t=r[c(n,e)];return void 0===t?1:t}function d(n,t,r){return o(n),o(t),u(n).push(t),void 0!==r&&a(n,t,r),e}function s(n,r){return t[n]&&(t[n]=u(n).filter(function(n){return n!==r})),e}function h(n,e){n||(n=i()),"boolean"!=typeof e&&(e=!0);var t={},r=[];function o(n){t[n]||(t[n]=!0,u(n).forEach(o),r.push(n))}return e?n.forEach(o):(n.forEach(function(n){t[n]=!0}),n.forEach(function(n){u(n).forEach(o)})),r}function l(n){return n.nodes.forEach(function(n){o(n.id)}),n.links.forEach(function(n){d(n.source,n.target,n.weight)}),e}return n&&l(n),e}},function(n){n.exports={fjord:{image:"assets/img/fjord.jpg",graph:{nodes:[{id:"a"},{id:"b"},{id:"c"}],links:[{source:"a",target:"b",weight:1},{source:"b",target:"c",weight:1}]},nodeCoordinates:{a:{x:100,y:100},b:{x:200,y:200},c:{x:300,y:300}}}}}]);